{"version":3,"sources":["Components/LightBox/LightBox.js","Container/Login/Login.js","Components/SingleUser/SingleUser.js","Components/OnlineList/OnlineList.js","Components/ModalUsers/ModalUsers.js","Container/Chat/Chat.js","Container/MainApp/PostData.js","Container/Register/Register.js","Components/NavBar/NavBar.js","Container/MainApp/MainApp.js","App.js","serviceWorker.js","index.js","Events.js"],"names":["LightBox","_ref","allinfo","bannerClass","color","react_default","a","createElement","show","className","msgToUser","Login","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","serverUrl","loginUser","asyncToGenerator","regenerator_default","mark","_callee","user","url","auth","wrap","_context","prev","next","name","password","displayLightBox","abrupt","concat","btoa","fetch","method","headers","Headers","Authorization","then","res","json","autorized","userLoggedIn","setState","catch","err","stop","_x","apply","arguments","getPass","event","target","value","getName","banner","bannerTimeOut","setTimeout","state","ifUserLoggedIn","_this2","mdbreact_esm","md","icon","onChange","label","group","type","validate","error","success","outline","onClick","User","Components_LightBox_LightBox","Component","SingleUser","userName","ListGroupItem","OnlineList","onlineUsers","ListGroup","map","index","SingleUser_SingleUser","key","ModalUsers","modal","_this$props","openModal","toggle","Modal","isOpen","ModalHeader","ModalBody","OnlineList_OnlineList","ModalFooter","endpoint","Chat1","componentDidMount","socket","initSocket","socketIOClient","emit","on","onlineUsersFromSoCKET","_callee2","_context2","data","arr","toConsumableArray","messages","Message","author","timestamp","Date","text","push","filter","addNewMessage","botResponce","assign","message","sendMessageToSocket","MSG","localStorage","getItem","id","Math","random","toString","split","openModalBtn","Row","ModalUsers_ModalUsers","main","onMessageSend","placeholder","width","PostDataToMongo","_x2","_PostDataToMongo","mainInfo","body","JSON","stringify","Content-Type","response","Register","window","location","origin","React","createRef","pass","rePass","clickedRegister","obj","resultRegsiter","sent","info","Events","ref","current","innerValue","gradient","rounded","NavBar","bind","assertThisInitialized","userLoggedOut","linkName","Navbar","light","expand","NavbarBrand","href","NavbarToggler","Collapse","navbar","Nav","NavItem","react_router_dom","to","MainApp","setItem","clear","box","Components_NavBar_NavBar","react_router","path","exact","render","Container_Register_Register","Chat_Chat","Container_Login_Login","App","Container_MainApp_MainApp","Boolean","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","LOGIN","MISSING_INPUT","PASSWORD_LENGTH","PASSWORD_MATCH","USER_EXITS","YOURE_IN","FALSE"],"mappings":"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","file":"static/js/main.580f3be3.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './LightBox.css'\r\n \r\n\r\nconst LightBox = ({allinfo}) => {\r\n\r\n  const bannerClass = allinfo.color === '0' ? \"warning\" : \"success\"; \r\n\r\n    return(\r\n    <div>\r\n      {  allinfo.show ?    \r\n      <div  className={bannerClass +\" banner\"}>\r\n           <h4>{allinfo.msgToUser}</h4>\r\n        </div>\r\n      : null\r\n             \r\n      }\r\n    </div>   \r\n    )\r\n}\r\nexport default  LightBox ;\r\n","import React, { Component } from 'react'\r\nimport { MDBContainer, MDBRow, MDBCol, MDBInput, MDBBtn ,MDBIcon,MDBCardHeader,MDBCard ,MDBCardBody} from 'mdbreact';\r\nimport './Login.css'\r\nimport LightBox from '../../Components/LightBox/LightBox'\r\n \r\nclass Login extends Component {\r\n  serverUrl   = 'http://localhost:3000';\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {     \r\n          password:\"\",\r\n          name:\"\",\r\n          ifUserLoggedIn:false,\r\n          banner : {\r\n            show: false, msgToUser: \"\", color: ''   \r\n          },      \r\n        };\r\n       \r\n      }\r\n   \r\n      loginUser = async (user) => {\r\n        if (user.name === \"\" || user.password === \"\") {\r\n          this.displayLightBox(\"please fill in all fields\", '0');\r\n          return;\r\n        }\r\n        const url = this.serverUrl + \"/users/login\";\r\n       \r\n        const auth = `Basic ${btoa(`${user.name}:${user.password}`)}`;\r\n        fetch(url, {\r\n          method: 'POST',\r\n          headers: new Headers({\r\n            Authorization: auth\r\n          })\r\n        }).then(res => res.json())\r\n          .then(res => {\r\n            if (res.autorized) {\r\n             \r\n              this.props.userLoggedIn(user.name)\r\n              this.setState({ name: user.name })\r\n            }\r\n          })\r\n          .catch(err => {\r\n            this.displayLightBox('Sign in','0')\r\n          });\r\n      }\r\n\r\n         getPass = (event)  => {\r\n            this.setState({password:event.target.value})\r\n         }\r\n\r\n         getName = (event)  => {\r\n          this.setState({name:event.target.value})\r\n          }\r\n        \r\n          displayLightBox = (msgToUser,color) => {\r\n            const banner = { show: true, msgToUser, color};\r\n            this.setState({ banner });\r\n            this.bannerTimeOut = setTimeout(() => {\r\n                const banner = { show: false, msgToUser: \"\", color: null };\r\n                this.setState({ banner })\r\n            }, 3000);\r\n        }\r\n\r\n    render() {       \r\n        return (  \r\n          <div > \r\n<MDBContainer>\r\n      <MDBRow className=\"divLogin\">\r\n        <MDBCol md=\"6\">\r\n          <MDBCard>        \r\n            <MDBCardBody>\r\n              <MDBCardHeader className=\"form-header deep-blue-gradient rounded\">\r\n                <h3 className=\"my-3\">\r\n                  <MDBIcon icon=\"lock\" /> Login:\r\n                </h3>\r\n              </MDBCardHeader>\r\n              <form>\r\n                <div className=\"grey-text\">\r\n                <MDBInput   onChange = {this.getName}\r\n                      label=\"Type your name\"\r\n                      icon=\"envelope\"\r\n                      group\r\n                      type=\"text\"\r\n                      validate\r\n                      error=\"wrong\"\r\n                      success=\"right\"\r\n                    />\r\n                    <MDBInput  onChange = {this.getPass}\r\n                      label=\"Type your password\"\r\n                      icon=\"lock\"\r\n                      group\r\n                      type=\"password\"\r\n                      validate\r\n                    />\r\n                </div>\r\n\r\n              <div className=\"text-center mt-4\">\r\n              <MDBBtn outline color=\"info\"  onClick = {() => {\r\n                      const name = this.state.name;\r\n                      const password = this.state.password;\r\n                      const User = {password:password,name:name}              \r\n                      this.loginUser(User)}}>\r\n                Send \r\n              </MDBBtn>\r\n              </div>\r\n              </form>\r\n            </MDBCardBody>\r\n          </MDBCard>\r\n        </MDBCol>\r\n      </MDBRow>\r\n    </MDBContainer>\r\n    <LightBox allinfo={this.state.banner} />\r\n          </div> \r\n        )\r\n    }\r\n}\r\nexport default  Login;"," import React from 'react'\r\n import { ListGroupItem  } from 'reactstrap';\r\n\r\n function SingleUser({userName}) {\r\n     return (\r\n         <div>\r\n              <ListGroupItem className=\"justify-content-between\">{userName}  </ListGroupItem>\r\n              \r\n         </div>\r\n     )\r\n }\r\n export default SingleUser","import React from 'react'\r\nimport SingleUser from '../SingleUser/SingleUser'\r\nimport { ListGroup } from 'reactstrap';\r\n\r\n function OnlineList({onlineUsers}) {\r\n    return (\r\n        <div>    \r\n    <ListGroup>\r\n       {\r\n           onlineUsers.map((user,index ) =>{\r\n               return (\r\n                   <SingleUser\r\n                   userName = {user}\r\n                   key={index}\r\n                   />\r\n               )\r\n           })\r\n       }\r\n           </ListGroup>\r\n        </div>\r\n    )\r\n}\r\nexport default OnlineList","import React, { Component } from 'react'\r\nimport {  Modal, ModalHeader, ModalBody, ModalFooter} from 'reactstrap';\r\nimport OnlineList from '../../Components/OnlineList/OnlineList';\r\nimport { MDBBtn } from 'mdbreact';\r\n\r\nexport default class ModalUsers extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          modal: false,     \r\n        };      \r\n      }\r\n    render() {\r\n        const {\r\n            openModal,\r\n            onlineUsers,\r\n            toggle\r\n        } = this.props\r\n        return (\r\n            <div>     \r\n            <Modal isOpen={openModal} toggle={ toggle} >\r\n              <ModalHeader toggle={ toggle}>Online Users</ModalHeader>\r\n              <ModalBody>\r\n\r\n              <OnlineList onlineUsers = { onlineUsers}/>    \r\n                \r\n            </ModalBody>\r\n              <ModalFooter>          \r\n              <MDBBtn outline color=\"info\"  \r\n                      onClick={ toggle}>\r\n                close \r\n              </MDBBtn>\r\n               </ModalFooter>\r\n            </Modal>\r\n          </div>\r\n        )\r\n    }\r\n}\r\n","\r\nimport React, { Component } from 'react'\r\nimport socketIOClient from 'socket.io-client';\r\nimport { MSG } from '../../Events'\r\nimport { Chat } from '@progress/kendo-react-conversational-ui';\r\nimport \"./Chat.css\"\r\nimport { Row } from 'reactstrap';\r\nimport ModalUsers from '../../Components/ModalUsers/ModalUsers';\r\n\r\nconst endpoint = 'http://localhost:8080';\r\n \r\nclass Chat1 extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      text: '',\r\n      messages: [],\r\n      userName: localStorage.getItem(\"userdetails\"),\r\n      onlineUsers: []\r\n\r\n    };\r\n    // this.name = props.name;  // for chat \r\n    const id = Math.random().toString().split('.')[1];\r\n    this.user = { id: id, name: this.state.userName };\r\n  }\r\n\r\n  componentDidMount = async (props) => {\r\n    this.initSocket(props);\r\n    const socket = socketIOClient(endpoint);\r\n\r\n    //push user to array connected users.\r\n    socket\r\n      .emit('setToSocketOnLiNE', { user: this.state.userName })\r\n\r\n    //send to the socket a req then respone will be all users\r\n    socket\r\n      .emit('getallusers')\r\n\r\n      // get all users from socket and display them\r\n      .on('sendallusers', onlineUsersFromSoCKET => {\r\n        this.setState({ onlineUsers: onlineUsersFromSoCKET });\r\n      });\r\n  }\r\n\r\n\r\n  //init socket and save it to setstate!\r\n  initSocket = async () => {\r\n\r\n    const socket = socketIOClient(endpoint);\r\n    this.setState({ socket: socket })\r\n    // listen to socket message coming from back-end!\r\n    socket.on(\"output\", data => {\r\n      const arr = [...this.state.messages];\r\n\r\n      let Message = {\r\n        author: data.author,\r\n        timestamp: new Date(),\r\n        text: data.text,\r\n      };\r\n      arr.push(Message)\r\n      this.setState({ messages: arr })\r\n    });\r\n    socket\r\n      .on('onlineConnect', onlineUsersFromSoCKET => {\r\n        this.setState({ onlineUsers: onlineUsersFromSoCKET });\r\n      });\r\n\r\n    // if user log out the user will be remove from list in node.\r\n    socket\r\n      .on('filter', filter => {\r\n       \r\n        this.setState({ onlineUsers: filter });\r\n      });\r\n  }\r\n  //user pressed on send message!\r\n  addNewMessage = (event) => {\r\n\r\n    let botResponce = Object.assign({}, event.message);\r\n    botResponce.author = this.user\r\n    this.sendMessageToSocket(botResponce)\r\n  };\r\n\r\n  // send message value to socket!\r\n  sendMessageToSocket = (text) => {\r\n    this.state.socket\r\n      .emit(MSG,\r\n        text\r\n      );\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      openModal,\r\n      toggle,\r\n      openModalBtn\r\n    } = this.props;\r\n    \r\n    return (\r\n      <div  >\r\n        <div className=\"container-2\">\r\n          <div onClick={openModalBtn} className=\"btn btn-two\">\r\n            <span >Online Users</span>\r\n          </div>\r\n        </div>\r\n        <Row>\r\n          <ModalUsers openModal={openModal} onlineUsers={this.state.onlineUsers} toggle={toggle} />\r\n          <Chat\r\n            messages={this.state.messages}\r\n            onMessageSend={this.addNewMessage}\r\n            placeholder={\"Type a message...\"}\r\n            width={600}>\r\n          </Chat>\r\n        </Row>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default Chat1;","\r\nexport async function PostDataToMongo(mainInfo,url){\r\nreturn   fetch(url , {\r\n  method: 'POST', \r\n  body: JSON.stringify(mainInfo),  \r\n  headers:{\r\n    'Content-Type': 'application/json'\r\n  }\r\n}).then(res => res.json())\r\n  .then(response =>  response )\r\n\r\n}\r\n\r\n \r\nexport async function getDataFromMongo(user,url){\r\n  const auth = `Basic ${ btoa(`${user.email}:${user.password}`)}`;\r\n\r\n  fetch(url, {\r\n    method: 'POST',\r\n    headers: new Headers({\r\n        Authorization: auth\r\n    })\r\n}).then(res => res.json())\r\n    .then(res => {\r\n        if (res.autorized) {\r\n      return   res\r\n        }\r\n    })\r\n    .catch(err => console.log('No Authrization'));\r\n}\r\n ","import React, { Component } from 'react'\r\nimport { MDBContainer, MDBRow, MDBCol, MDBInput, MDBBtn, MDBCard, MDBCardBody } from 'mdbreact';\r\nimport LightBox from '../../Components/LightBox/LightBox'\r\nimport { PostDataToMongo } from '../../Container/MainApp/PostData'\r\nimport  * as Events   from '../../Events'\r\n\r\n class Register extends Component {\r\n  serverUrl   = window.location.origin;\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {     \r\n      banner : {\r\n        show: false, msgToUser: \"\", color: ''   \r\n      }\r\n      \r\n    };\r\n  }\r\n  name = React.createRef();\r\n  pass = React.createRef();\r\n  rePass = React.createRef();\r\n\r\n\r\n  displayLightBox = (msgToUser,color) => {\r\n    const banner = { show: true, msgToUser, color};\r\n    this.setState({ banner });\r\n    this.bannerTimeOut = setTimeout(() => {\r\n        const banner = { show: false, msgToUser: \"\", color: null };\r\n        this.setState({ banner })\r\n    }, 3000);\r\n}\r\n\r\n  clickedRegister = async (obj) => {\r\n  \r\n    const url = this.serverUrl + \"/users/register\";\r\n    let resultRegsiter = await PostDataToMongo(obj, url)\r\n \r\n    if (resultRegsiter.info === Events.MISSING_INPUT) {\r\n      this.displayLightBox(resultRegsiter.info, Events.FALSE)\r\n    }\r\n    if (resultRegsiter.info === Events.PASSWORD_LENGTH) {\r\n      this.displayLightBox(resultRegsiter.info, Events.FALSE)\r\n    }\r\n    if (resultRegsiter.info === Events.PASSWORD_MATCH) {\r\n      this.displayLightBox(resultRegsiter.info, Events.FALSE)\r\n    }\r\n\r\n    if (resultRegsiter.info === Events.USER_EXITS) {\r\n      this.displayLightBox(resultRegsiter.info, Events.FALSE)\r\n    }\r\n    if (resultRegsiter.info === Events.YOURE_IN) {\r\n      this.displayLightBox(resultRegsiter.info,'1')\r\n    }\r\n  }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n      <MDBContainer>\r\n      <MDBRow>\r\n        <MDBCol  >\r\n          <MDBCard>\r\n            <MDBCardBody>\r\n              <form>\r\n                <div className=\"grey-text\">\r\n                  <MDBInput\r\n                   ref={this.name}\r\n                    label=\"Your name\"\r\n                    icon=\"user\"\r\n                    group\r\n                    type=\"text\"\r\n                    validate\r\n                    error=\"wrong\"\r\n                    success=\"right\"\r\n                  />\r\n           \r\n                  <MDBInput\r\n                         ref={this.pass}\r\n                    label=\"Confirm your pass\"\r\n                    icon=\"exclamation-triangle\"\r\n                    group\r\n                    type=\"text\"\r\n                    validate\r\n                    error=\"wrong\"\r\n                    success=\"right\"\r\n                  />\r\n                  <MDBInput\r\n                    ref={this.rePass}\r\n                    label=\"Your password\"\r\n                    icon=\"lock\"\r\n                    group\r\n                    type=\"password\"\r\n                    validate\r\n                  />\r\n                </div>\r\n                <div className=\"text-center py-4 mt-3\">\r\n                <MDBBtn onClick={ ()=> {            \r\n                let name = this.name.current.state.innerValue;       \r\n                let pass = this.pass.current.state.innerValue;\r\n                let rePass =this.rePass.current.state.innerValue;\r\n                const obj = {name :name ,pass:pass,rePass:rePass}\r\n                this.clickedRegister(obj)}}\r\n                  type=\"button\"\r\n                  gradient=\"blue\"\r\n                  rounded\r\n                  className=\"btn-block z-depth-1a\"\r\n                >\r\n                  Sign in\r\n                </MDBBtn>\r\n                </div>\r\n              </form>\r\n            </MDBCardBody>\r\n          </MDBCard>\r\n        </MDBCol>\r\n      </MDBRow>\r\n    </MDBContainer>\r\n    <LightBox allinfo={this.state.banner} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Register;","\r\nimport React, { Component } from 'react'\r\nimport { Link } from \"react-router-dom\";\r\nimport './NavBar.css'\r\nimport {Collapse,Navbar,NavbarToggler,NavbarBrand, Nav,NavItem,} from 'reactstrap';\r\nimport { MDBIcon } from 'mdbreact';\r\n\r\n\r\n\r\nclass NavBar extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.toggle = this.toggle.bind(this);\r\n    this.state = {\r\n      isOpen: false,\r\n    };\r\n  }\r\n\r\n  toggle() {\r\n    this.setState({\r\n      isOpen: !this.state.isOpen\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { \r\n      ifUserLoggedIn\r\n      , userLoggedOut,   \r\n    } = this.props;\r\n\r\n    const linkName = ifUserLoggedIn ? \"Logout\" : \"Login\";\r\n      \r\n    return (\r\n      <div>\r\n      <Navbar color=\"light\" light expand=\"md\">\r\n          <NavbarBrand href=\"/\">Chat App</NavbarBrand>\r\n          <NavbarToggler onClick={this.toggle} />\r\n          <Collapse isOpen={this.state.isOpen} navbar>\r\n            <Nav className=\"ml-auto\" navbar>\r\n       <div className=\"allItems\">\r\n            <NavItem> \r\n               <Link     to=\"/\" onClick={userLoggedOut}>  \r\n               <MDBIcon icon=\"arrow-circle-right mdb-gallery-view-icon\" />\r\n               {linkName}</Link>       \r\n           </NavItem>\r\n              <NavItem>   \r\n                  <Link to=\"/Register/\">\r\n                  <MDBIcon icon=\"child mdb-gallery-view-icon\" />\r\n                    Register</Link>    \r\n              </NavItem>\r\n             </div>\r\n            </Nav>\r\n          </Collapse>\r\n        </Navbar>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default NavBar;\r\n\r\n\r\n","\r\nimport React, { Component } from 'react'\r\nimport Login from '../../Container/Login/Login'\r\nimport Chat from '../Chat/Chat'\r\nimport { BrowserRouter as Router, Route, Redirect } from \"react-router-dom\";\r\nimport Register from '../Register/Register'\r\nimport NavBar from '../../Components/NavBar/NavBar'\r\nimport socketIOClient from 'socket.io-client';\r\n\r\nclass MainApp extends Component {\r\n\r\n  endpoint = 'http://localhost:3001';//socket\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      name: '', //user name\r\n      modal: false,   //modal open or close\r\n      ifUserLoggedIn: localStorage.getItem(\"ifOnline\") || false,\r\n      // display warning for users\r\n      box: {\r\n        show: false, msgToUser: \"\"\r\n      }\r\n    };\r\n    this.toggle = this.toggle.bind(this); // for modal \r\n  }\r\n\r\n  // bind the function \r\n  toggle() {\r\n    this.setState({ modal: false })\r\n  }\r\n  // open the function\r\n  openModalBtn = () => {\r\n     \r\n    this.setState({ modal: true })\r\n  }\r\n  //function from login, exucte after login authorization.\r\n  userLoggedIn = (name) => {\r\n    let ifOnline = true;\r\n    localStorage.setItem('userdetails', name);\r\n    localStorage.setItem('ifOnline', ifOnline);\r\n    this.setState({ ifUserLoggedIn: true, name: name })\r\n\r\n  }\r\n\r\n  //user logs out\r\n  userLoggedOut = () => {\r\n    const socket = socketIOClient(this.endpoint);\r\n    socket\r\n      .emit('logout', { user: this.state.name })\r\n    localStorage.clear();\r\n    this.setState({ ifUserLoggedIn: false, name: '' });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Router>\r\n          <NavBar ifUserLoggedIn={this.state.ifUserLoggedIn} userLoggedOut={this.userLoggedOut}  />\r\n          <Route path=\"/Register/\" exact render={() => <Register\r\n            clickedRegister={this.clickedRegister} allinfo={this.state.box} />} />\r\n\r\n          <Route path=\"/Chat/\" exact render={() => <Chat openModal={this.state.modal}  openModalBtn={this.openModalBtn} toggle={() => this.toggle()} />} />\r\n\r\n          <Route path=\"/\" exact render={() => (\r\n            this.state.ifUserLoggedIn ? (<Redirect to='/Chat/' />) :\r\n              (<Login userLoggedIn={this.userLoggedIn} />)\r\n\r\n          )} />\r\n        </Router>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default MainApp;","import React from 'react';\n \nimport './App.css';\nimport MainApp from './Container/MainApp/MainApp'\nfunction App() {\n  return (\n    <div className=\"App\">\n  <MainApp/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\n \nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = {\r\n    MSG:\"MSG\",\r\n    LOGIN:\"LOGIN\",\r\n    MISSING_INPUT:\"misssing inputs\",\r\n    PASSWORD_LENGTH:\"Password must be 8 digits\",\r\n    PASSWORD_MATCH:\"Password doesnt match\",\r\n    USER_EXITS:\"user exits\",\r\n    YOURE_IN:\"Youre In\",\r\n    FALSE:\"0\",\r\n}"],"sourceRoot":""}