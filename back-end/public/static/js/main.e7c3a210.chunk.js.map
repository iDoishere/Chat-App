{"version":3,"sources":["Components/LightBox/LightBox.js","Container/Login/Login.js","Components/SingleUser/SingleUser.js","Components/OnlineList/OnlineList.js","Components/ModalUsers/ModalUsers.js","Container/Chat/Chat.js","Container/MainApp/PostData.js","Container/Register/Register.js","Components/NavBar/NavBar.js","Container/MainApp/MainApp.js","App.js","serviceWorker.js","index.js","Events.js"],"names":["LightBox","_ref","allinfo","bannerClass","color","react_default","a","createElement","show","className","msgToUser","Login","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","serverUrl","window","location","origin","loginUser","user","name","password","console","log","url","auth","concat","btoa","fetch","method","headers","Headers","Authorization","then","res","json","autorized","userLoggedIn","catch","err","displayLightBox","getPass","event","setState","target","value","getName","banner","bannerTimeOut","setTimeout","state","ifUserLoggedIn","clearTimeout","_this2","mdbreact_esm","md","icon","onChange","label","group","type","validate","error","success","outline","onClick","User","Components_LightBox_LightBox","Component","SingleUser","userName","ListGroupItem","OnlineList","onlineUsers","ListGroup","map","index","SingleUser_SingleUser","key","ModalUsers","modal","_this$props","openModal","toggle","Modal","isOpen","ModalHeader","ModalBody","OnlineList_OnlineList","ModalFooter","Chat1","endpoint","componentDidMount","socket","socketIOClient","joinChat","on","data","arr","toConsumableArray","messages","Message","author","timestamp","Date","text","push","addNewMessage","obj","assign","message","emit","sendMessageToSocket","localStorage","getItem","id","Math","random","toString","split","bind","assertThisInitialized","openModalBtn","Row","ModalUsers_ModalUsers","main","onMessageSend","placeholder","width","PostDataToMongo","_x","_x2","_PostDataToMongo","apply","arguments","_callee","mainInfo","regenerator_default","wrap","_context","prev","next","abrupt","body","JSON","stringify","Content-Type","response","stop","Register","React","createRef","pass","rePass","clickedRegister","asyncToGenerator","mark","resultRegsiter","sent","info","Events","ref","current","innerValue","gradient","rounded","NavBar","userLoggedOut","linkName","Navbar","light","expand","NavbarBrand","href","NavbarToggler","Collapse","navbar","Nav","NavItem","react_router_dom","to","MainApp","setItem","removeItem","box","Components_NavBar_NavBar","react_router","path","exact","render","Container_Register_Register","Chat_Chat","Container_Login_Login","App","Container_MainApp_MainApp","Boolean","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","MSG","LOGIN","MISSING_INPUT","PASSWORD_LENGTH","PASSWORD_MATCH","USER_EXITS","YOURE_IN","FALSE"],"mappings":"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","file":"static/js/main.e7c3a210.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './LightBox.css'\r\n \r\n\r\nconst LightBox = ({allinfo}) => {\r\n\r\n  const bannerClass = allinfo.color === '0' ? \"warning\" : \"success\"; \r\n\r\n    return(\r\n    <div>\r\n      {  allinfo.show ?    \r\n      <div  className={bannerClass +\" banner\"}>\r\n           <h4>{allinfo.msgToUser}</h4>\r\n        </div>\r\n      : null\r\n             \r\n      }\r\n    </div>   \r\n    )\r\n}\r\nexport default  LightBox ;\r\n","import React, { Component } from 'react'\r\nimport { MDBContainer, MDBRow, MDBCol, MDBInput, MDBBtn ,MDBIcon,MDBCardHeader,MDBCard ,MDBCardBody} from 'mdbreact';\r\nimport './Login.css'\r\nimport LightBox from '../../Components/LightBox/LightBox'\r\n \r\nclass Login extends Component {\r\n  serverUrl   = window.location.origin;\r\n//  serverUrl   = 'http://localhost:8080';\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {     \r\n          password:\"\",\r\n          name:\"\",\r\n          ifUserLoggedIn:false,\r\n          banner : {\r\n            show: false, msgToUser: \"\", color: ''   \r\n          },      \r\n        };\r\n       \r\n      }\r\n   \r\n      loginUser =   (user) => {\r\n        if (user.name === \"\" || user.password === \"\") {\r\n          this.displayLightBox(\"please fill in all fields\", '0');\r\n          return;\r\n        }\r\n        console.log(this.serverUrl)\r\n        const url = this.serverUrl + \"/users/login\";\r\n       \r\n        const auth = `Basic ${btoa(`${user.name}:${user.password}`)}`;\r\n        fetch(url, {\r\n          method: 'POST',\r\n          headers: new Headers({\r\n            Authorization: auth\r\n          })\r\n        }).then(res => res.json())\r\n          .then(res => {\r\n            if (res.autorized) {       \r\n              this.props.userLoggedIn(user.name) // func in main app ..user will transfer to chat page\r\n            }\r\n          })\r\n          .catch(err => {\r\n            this.displayLightBox(\"failed to login\",'0');\r\n          });\r\n      }\r\n\r\n         getPass = (event)  => {\r\n            this.setState({password:event.target.value})\r\n         }\r\n\r\n         getName = (event)  => {\r\n          this.setState({name:event.target.value})\r\n          }\r\n     \r\n          displayLightBox = (msgToUser,color) => {\r\n            const banner = { show: true, msgToUser, color};\r\n            this.setState({ banner });\r\n            this.bannerTimeOut = setTimeout(() => {\r\n                const banner = { show: false, msgToUser: \"\", color: null };\r\n                this.setState({ banner })\r\n            }, 3000);\r\n        }\r\n        \r\n      \r\n          componentWillUnmount() {\r\n            clearTimeout(this.bannerTimeOut);\r\n        }\r\n    \r\n    render() {       \r\n        return (  \r\n          <div > \r\n<MDBContainer>\r\n      <MDBRow className=\"divLogin\">\r\n        <MDBCol md=\"6\">\r\n          <MDBCard>        \r\n            <MDBCardBody>\r\n              <MDBCardHeader className=\"form-header deep-blue-gradient rounded\">\r\n                <h3 className=\"my-3\">\r\n                  <MDBIcon icon=\"lock\" /> Login:\r\n                </h3>\r\n              </MDBCardHeader>\r\n              <form>\r\n                <div className=\"grey-text\">\r\n                <MDBInput   onChange = {this.getName}\r\n                      label=\"Type your name\"\r\n                      icon=\"envelope\"\r\n                      group\r\n                      type=\"text\"\r\n                      validate\r\n                      error=\"wrong\"\r\n                      success=\"right\"\r\n                    />\r\n                    <MDBInput  onChange = {this.getPass}\r\n                      label=\"Type your password\"\r\n                      icon=\"lock\"\r\n                      group\r\n                      type=\"password\"\r\n                      validate\r\n                    />\r\n                </div>\r\n\r\n              <div className=\"text-center mt-4\">\r\n              <MDBBtn outline color=\"info\"  onClick = {() => {\r\n                      const name = this.state.name;\r\n                      const password = this.state.password;\r\n                      const User = {password:password,name:name}              \r\n                      this.loginUser(User)}}>\r\n                Send \r\n              </MDBBtn>\r\n              </div>\r\n              </form>\r\n            </MDBCardBody>\r\n          </MDBCard>\r\n        </MDBCol>\r\n      </MDBRow>\r\n    </MDBContainer>\r\n    <LightBox allinfo={this.state.banner} />\r\n          </div> \r\n        )\r\n    }\r\n}\r\nexport default  Login;"," import React from 'react'\r\n import { ListGroupItem  } from 'reactstrap';\r\n\r\n function SingleUser({userName}) {\r\n     return (\r\n         <div>\r\n              <ListGroupItem className=\"justify-content-between\">{userName}  </ListGroupItem>\r\n              \r\n         </div>\r\n     )\r\n }\r\n export default SingleUser","import React from 'react'\r\nimport SingleUser from '../SingleUser/SingleUser'\r\nimport { ListGroup } from 'reactstrap';\r\n\r\n function OnlineList({onlineUsers}) {\r\n     console.log(onlineUsers)\r\n    return (\r\n        <div>    \r\n    <ListGroup>\r\n       {\r\n           onlineUsers ?onlineUsers.map((user,index ) =>{\r\n               return (\r\n                   <SingleUser\r\n                   userName = {user}\r\n                   key={index}\r\n                   />\r\n               )\r\n           }):''\r\n       }\r\n           </ListGroup>\r\n        </div>\r\n    )\r\n}\r\nexport default OnlineList","import React, { Component } from 'react'\r\nimport {  Modal, ModalHeader, ModalBody, ModalFooter} from 'reactstrap';\r\nimport OnlineList from '../../Components/OnlineList/OnlineList';\r\nimport { MDBBtn } from 'mdbreact';\r\n\r\nexport default class ModalUsers extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          modal: false,     \r\n        };      \r\n      }\r\n    render() {\r\n        const {\r\n            openModal,\r\n            onlineUsers,\r\n            toggle\r\n        } = this.props\r\n        return (\r\n            <div>     \r\n            <Modal isOpen={openModal} toggle={ toggle} >\r\n              <ModalHeader toggle={ toggle}>Online Users</ModalHeader>\r\n              <ModalBody>\r\n\r\n              <OnlineList onlineUsers = { onlineUsers}/>    \r\n                \r\n            </ModalBody>\r\n              <ModalFooter>          \r\n              <MDBBtn outline color=\"info\"  \r\n                      onClick={ toggle}>\r\n                close \r\n              </MDBBtn>\r\n               </ModalFooter>\r\n            </Modal>\r\n          </div>\r\n        )\r\n    }\r\n}\r\n","\r\nimport React, { Component } from 'react'\r\nimport socketIOClient from 'socket.io-client';\r\nimport { MSG } from '../../Events'\r\nimport { Chat } from '@progress/kendo-react-conversational-ui';\r\nimport \"./Chat.css\"\r\nimport { Row } from 'reactstrap';\r\nimport ModalUsers from '../../Components/ModalUsers/ModalUsers';\r\n\r\n \r\n \r\nclass Chat1 extends Component {\r\n  // endpoint   = 'http://localhost:8080';\r\n    endpoint = window.location.origin;//socket\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      text: '',\r\n      messages: [],\r\n      userName: localStorage.getItem(\"userdetails\"),\r\n      onlineUsers: [],\r\n      socket:''\r\n\r\n    };\r\n    // this.name = props.name;  // for chat \r\n    const id = Math.random().toString().split('.')[1];\r\n    this.user = { id: id, name: this.state.userName };\r\n    this.addNewMessage = this.addNewMessage.bind(this);\r\n    \r\n    \r\n  }\r\n\r\n\r\n   \r\n componentDidMount =   ( ) => {\r\n  this.socket = socketIOClient(this.endpoint);\r\n  this.joinChat();\r\n\r\n  this.socket.on(\"new message\", data => {\r\n      \r\n     \r\n    // console.log( this.state.messages)\r\n    const arr = [...this.state.messages]  ;\r\n    \r\n    let Message = {\r\n       author: data.author,\r\n     timestamp: new Date(),\r\n      text: data.text,\r\n     };\r\n     arr.push(Message)\r\n     console.log( this.state.messages)\r\n    this.setState({ messages: arr })\r\n  });\r\n}\r\n\r\n\r\n\r\n\r\n joinChat(){\r\n\r\n  this.socket\r\n    .emit('new user',   this.state.userName )\r\n\r\n  this.socket\r\n  .on('get users', data => {\r\n    \r\n    this.setState({ onlineUsers: data  });\r\n  });\r\n\r\n}\r\n  //user pressed on send message!\r\n  addNewMessage = (event) => {\r\n\r\n    let obj = Object.assign({}, event.message);\r\n    console.log(obj)\r\n    obj.author = this.user\r\n     \r\n    this.socket\r\n    .emit('send message',\r\n    obj \r\n    );\r\n\r\n \r\n  };\r\n\r\n  // send message value to socket!\r\n  sendMessageToSocket = (obj) => {\r\n    console.log(obj)\r\n \r\n\r\n}\r\n\r\n// componentWillUnmount(){\r\n//   this.socket.close();\r\n// }\r\n  render() {\r\n    console.log(this.state.messages  )\r\n    const {\r\n      openModal,\r\n      toggle,\r\n      openModalBtn\r\n    } = this.props;\r\n    \r\n    return (\r\n      <div  >\r\n        <div className=\"container-2\">\r\n          <div onClick={openModalBtn} className=\"btn btn-two\">\r\n            <span >Online Users</span>\r\n          </div>\r\n        </div>\r\n        <Row>\r\n          <ModalUsers openModal={openModal} onlineUsers={this.state.onlineUsers} toggle={toggle} />\r\n          <Chat\r\n            messages={this.state.messages}\r\n            onMessageSend={this.addNewMessage}\r\n            placeholder={\"Type a message...\"}\r\n            width={600}>\r\n          </Chat>\r\n        </Row>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default Chat1;","\r\nexport async function PostDataToMongo(mainInfo,url){\r\nreturn   fetch(url , {\r\n  method: 'POST', \r\n  body: JSON.stringify(mainInfo),  \r\n  headers:{\r\n    'Content-Type': 'application/json'\r\n  }\r\n}).then(res => res.json())\r\n  .then(response =>  response )\r\n\r\n}\r\n\r\n \r\nexport async function getDataFromMongo(user,url){\r\n  const auth = `Basic ${ btoa(`${user.email}:${user.password}`)}`;\r\n\r\n  fetch(url, {\r\n    method: 'POST',\r\n    headers: new Headers({\r\n        Authorization: auth\r\n    })\r\n}).then(res => res.json())\r\n    .then(res => {\r\n        if (res.autorized) {\r\n      return   res\r\n        }\r\n    })\r\n    .catch(err => console.log('No Authrization'));\r\n}\r\n ","import React, { Component } from 'react'\r\nimport { MDBContainer, MDBRow, MDBCol, MDBInput, MDBBtn, MDBCard, MDBCardBody } from 'mdbreact';\r\nimport LightBox from '../../Components/LightBox/LightBox'\r\nimport { PostDataToMongo } from '../../Container/MainApp/PostData'\r\nimport  * as Events   from '../../Events'\r\n\r\n class Register extends Component {\r\n serverUrl   = window.location.origin;\r\n // serverUrl   = 'http://localhost:8080';\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {     \r\n      banner : {\r\n        show: false, msgToUser: \"\", color: ''   \r\n      }\r\n      \r\n    };\r\n  }\r\n  name = React.createRef();\r\n  pass = React.createRef();\r\n  rePass = React.createRef();\r\n\r\n\r\n  displayLightBox = (msgToUser,color) => {\r\n    const banner = { show: true, msgToUser, color};\r\n    this.setState({ banner });\r\n    this.bannerTimeOut = setTimeout(() => {\r\n        const banner = { show: false, msgToUser: \"\", color: null };\r\n        this.setState({ banner })\r\n    }, 3000);\r\n}\r\n\r\n  clickedRegister = async (obj) => {\r\n  \r\n    const url = this.serverUrl + \"/users/register\";\r\n    let resultRegsiter = await PostDataToMongo(obj, url)\r\n \r\n    if (resultRegsiter.info === Events.MISSING_INPUT) {\r\n      this.displayLightBox(resultRegsiter.info, Events.FALSE)\r\n    }\r\n    if (resultRegsiter.info === Events.PASSWORD_LENGTH) {\r\n      this.displayLightBox(resultRegsiter.info, Events.FALSE)\r\n    }\r\n    if (resultRegsiter.info === Events.PASSWORD_MATCH) {\r\n      this.displayLightBox(resultRegsiter.info, Events.FALSE)\r\n    }\r\n\r\n    if (resultRegsiter.info === Events.USER_EXITS) {\r\n      this.displayLightBox(resultRegsiter.info, Events.FALSE)\r\n    }\r\n    if (resultRegsiter.info === Events.YOURE_IN) {\r\n      this.displayLightBox(resultRegsiter.info,'1')\r\n    }\r\n  }\r\n  componentWillUnmount() {\r\n    clearTimeout(this.bannerTimeOut);\r\n}\r\n    render() {\r\n        return (\r\n            <div>\r\n      <MDBContainer>\r\n      <MDBRow>\r\n        <MDBCol  >\r\n          <MDBCard>\r\n            <MDBCardBody>\r\n              <form>\r\n                <div className=\"grey-text\">\r\n                  <MDBInput\r\n                   ref={this.name}\r\n                    label=\"Your name\"\r\n                    icon=\"user\"\r\n                    group\r\n                    type=\"text\"\r\n                    validate\r\n                    error=\"wrong\"\r\n                    success=\"right\"\r\n                  />\r\n           \r\n                  <MDBInput\r\n                         ref={this.pass}\r\n                    label=\"Confirm your pass\"\r\n                    icon=\"exclamation-triangle\"\r\n                    group\r\n                    type=\"text\"\r\n                    validate\r\n                    error=\"wrong\"\r\n                    success=\"right\"\r\n                  />\r\n                  <MDBInput\r\n                    ref={this.rePass}\r\n                    label=\"Your password\"\r\n                    icon=\"lock\"\r\n                    group\r\n                    type=\"password\"\r\n                    validate\r\n                  />\r\n                </div>\r\n                <div className=\"text-center py-4 mt-3\">\r\n                <MDBBtn onClick={ ()=> {            \r\n                let name = this.name.current.state.innerValue;       \r\n                let pass = this.pass.current.state.innerValue;\r\n                let rePass =this.rePass.current.state.innerValue;\r\n                const obj = {name :name ,pass:pass,rePass:rePass}\r\n                this.clickedRegister(obj)}}\r\n                  type=\"button\"\r\n                  gradient=\"blue\"\r\n                  rounded\r\n                  className=\"btn-block z-depth-1a\"\r\n                >\r\n                  Sign in\r\n                </MDBBtn>\r\n                </div>\r\n              </form>\r\n            </MDBCardBody>\r\n          </MDBCard>\r\n        </MDBCol>\r\n      </MDBRow>\r\n    </MDBContainer>\r\n    <LightBox allinfo={this.state.banner} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Register;","\r\nimport React, { Component } from 'react'\r\nimport { Link } from \"react-router-dom\";\r\nimport './NavBar.css'\r\nimport {Collapse,Navbar,NavbarToggler,NavbarBrand, Nav,NavItem,} from 'reactstrap';\r\nimport { MDBIcon } from 'mdbreact';\r\n\r\n\r\n\r\nclass NavBar extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.toggle = this.toggle.bind(this);\r\n    this.state = {\r\n      isOpen: false,\r\n    };\r\n  }\r\n\r\n  toggle() {\r\n    this.setState({\r\n      isOpen: !this.state.isOpen\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { \r\n      ifUserLoggedIn\r\n      , userLoggedOut,   \r\n    } = this.props;\r\n\r\n    const linkName = ifUserLoggedIn ? \"Logout\" : \"Login\";\r\n      \r\n    return (\r\n      <div>\r\n      <Navbar color=\"light\" light expand=\"md\">\r\n          <NavbarBrand href=\"/\">Chat App</NavbarBrand>\r\n          <NavbarToggler onClick={this.toggle} />\r\n          <Collapse isOpen={this.state.isOpen} navbar>\r\n            <Nav className=\"ml-auto\" navbar>\r\n       <div className=\"allItems\">\r\n            <NavItem> \r\n               <Link     to=\"/\" onClick={userLoggedOut}>  \r\n               <MDBIcon icon=\"arrow-circle-right mdb-gallery-view-icon\" />\r\n               {linkName}</Link>       \r\n           </NavItem>\r\n              <NavItem>   \r\n                  <Link to=\"/Register/\">\r\n                  <MDBIcon icon=\"child mdb-gallery-view-icon\" />\r\n                    Register</Link>    \r\n              </NavItem>\r\n             </div>\r\n            </Nav>\r\n          </Collapse>\r\n        </Navbar>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default NavBar;\r\n\r\n\r\n","\r\nimport React, { Component } from 'react'\r\nimport Login from '../../Container/Login/Login'\r\nimport Chat from '../Chat/Chat'\r\nimport { BrowserRouter as Router, Route, Redirect } from \"react-router-dom\";\r\nimport Register from '../Register/Register'\r\nimport NavBar from '../../Components/NavBar/NavBar'\r\nimport socketIOClient from 'socket.io-client';\r\n\r\nclass MainApp extends Component {\r\n\r\n  endpoint = 'http://localhost:8080';//socket\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      name: '', //user name\r\n      socket:'',\r\n      modal: false,   //modal open or close\r\n      ifUserLoggedIn: localStorage.getItem(\"ifOnline\") || false,\r\n      // display warning for users\r\n      box: {\r\n        show: false, msgToUser: \"\"\r\n      }\r\n    };\r\n    this.toggle = this.toggle.bind(this); // for modal \r\n  }\r\n\r\n\r\n  componentDidMount(){\r\n    const socket = socketIOClient(this.endpoint);\r\n\r\n    this.setState({socket:socket})\r\n  }\r\n\r\n  // bind the function \r\n  toggle() {\r\n    this.setState({ modal: false })\r\n  }\r\n  // open the function\r\n  openModalBtn = () => {\r\n     \r\n    this.setState({ modal: true })\r\n  }\r\n  //function from login, exucte after login authorization.\r\n  userLoggedIn = (name) => {\r\n    let ifOnline = true;\r\n    localStorage.setItem('userdetails', name);\r\n    localStorage.setItem('ifOnline', ifOnline);\r\n    this.setState({ ifUserLoggedIn: true, name: name })\r\n\r\n  }\r\n\r\n  //user logs out\r\n  userLoggedOut =  () => {\r\n  \r\n   \r\n    this.state.socket\r\n    .emit('log out', { user: this.state.name })\r\n \r\n    localStorage.removeItem(\"userdetails\");\r\n    localStorage.removeItem(\"ifOnline\");\r\n\r\n    this.setState({ ifUserLoggedIn: false, name: '' });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Router>\r\n          <NavBar ifUserLoggedIn={this.state.ifUserLoggedIn} userLoggedOut={this.userLoggedOut}  />\r\n          <Route path=\"/Register/\" exact render={() => <Register\r\n            clickedRegister={this.clickedRegister} allinfo={this.state.box} />} />\r\n\r\n          <Route path=\"/Chat/\" exact render={() => <Chat openModal={this.state.modal}  openModalBtn={this.openModalBtn} toggle={() => this.toggle()} />} />\r\n\r\n          <Route path=\"/\" exact render={() => (\r\n            this.state.ifUserLoggedIn ? (<Redirect to='/Chat/' />) :\r\n              (<Login userLoggedIn={this.userLoggedIn} />)\r\n\r\n          )} />\r\n        </Router>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default MainApp;","import React from 'react';\n \nimport './App.css';\nimport MainApp from './Container/MainApp/MainApp'\nfunction App() {\n  return (\n    <div className=\"App\">\n  <MainApp/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\n \nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = {\r\n    MSG:\"MSG\",\r\n    LOGIN:\"LOGIN\",\r\n    MISSING_INPUT:\"misssing inputs\",\r\n    PASSWORD_LENGTH:\"Password must be 8 digits\",\r\n    PASSWORD_MATCH:\"Password doesnt match\",\r\n    USER_EXITS:\"user exits\",\r\n    YOURE_IN:\"Youre In\",\r\n    FALSE:\"0\",\r\n}"],"sourceRoot":""}